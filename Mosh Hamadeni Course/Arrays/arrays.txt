Arrays are the simplest data structures and we use them to store a list of items like a list of strings, numbers, objects and litterly anything. These items get stored sequentially in memory. For example, if we allocate an array of five integers, these intergers get stored in memory like this.
Let's say the adress of the first item in memory is 100, as you probably know, integers take four bytes of memeory, so the second item would be stored at the memory location 104, the third item would be stored at the memory location 108. For this reason, looking up items in an array is super fast. We give our array an index and it will figure out where exactly in memory we should access. Now what do you think is the runtime complexity of this operation? It's O of 1 O(1). Because the calculation of the memory address is very simple, it doesn't involve any loops or complexe logic. So if you need to store a list of items and access them by their index, arrays are the optimal data structure for you.

Now let's look at the limitations and weaknesses of arrays. In Java and many other languages arrays are static which means when we allocate them we should specify their size and this size can not change later on, so we need to know ahead of time how many items we want to store in an array. 
Now what if we don't know? you have to make a guess. If our guess is too large, we'll waste memory, because we'll have cells that are never filled. If our guess is too small, our array gets filled quickly. Then to add another item we'll have to resize the array. Which means we should allocate a larger array and then copy all the items in the old array into the new array. This operation can be costly. Can you guess the runtime copmlexity of this operation? Here's the answer. Let's say our array has five items, now we want to add a sixth item, you have to allocate a new array, and copy all of these five items into that new array. So the runtime complexity of this operaion is an O of n O(n). Which means the cost of copying these items increases linearly and in direct proportions the size of the array.

Now let's talk about removing an item. Here we have another couple scenarios, if you want to remove the last item, that's pretty easy, you look it by its index and clear the memory. So here we have an O of 1 O(1). Which is our best case scenario. What is the worst case scenario here? This is when we want to remove an item from the begining of the array, you have to shift all the items on the right one step to the left to fill up the hole. The more items we have the more the shifting operation is going to cost. So for the worst case scenario, deletion is an O of n O(n) operation. So, because arrays have fixed size, in situations where we don't know ahead of time how many items we want to store in them, or when we need to remove a lot of items from them, they don't perform well. In those cases, we use linked lists, which we're going to talk about later in the course.